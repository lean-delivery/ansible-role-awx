---

- name: Setting initial facts
  set_fact:
    pg_create_user_result: ok
    pg_create_db_result: ok
    awx_create_superuser_result: ok

- name: Check if PostgreSQL database is initialized.
  stat:
    path: "/var/opt/rh/rh-postgresql10/lib/pgsql/data/PG_VERSION"
  register: rh_pgdata_file
  become: true
  become_user: root

  # CONFIGURE AWX
- name: Initialize DB
  command:
    argv:
    - scl
    - enable
    - rh-postgresql10
    - "postgresql-setup initdb"
  when: not rh_pgdata_file.stat.exists
  become: true
  become_user: root

- name: Start and enable Postgresql Database services
  systemd:
    enabled: true
    state: started
    name: rh-postgresql10-postgresql
  become: true
  become_user: root

- name: Start and enable RabbitMQ service
  systemd:
    enabled: true
    state: started
    name: rabbitmq-server
  become: true
  become_user: root

- name: Create Postgres user
  command:
    argv:
    - scl
    - enable
    - rh-postgresql10
    - "su postgres -c \"createuser -S awx\""
  register: pg_create_user_output
  ignore_errors: true
  when: true
  become: true
  become_user: root

- name: Create Postgres user - validation
  set_fact: pg_create_user_result = failed
  when: pg_create_user_output.stderr|length > 0 and pg_create_user_output.stderr.find('already exists') == 0

- name: Create Postgres user - stop playbook in case of error
  fail: msg="Postgres failed creating user"
  when: pg_create_user_result == "failed"

- name: Create Postgres DB
  command:
    argv:
    - scl
    - enable
    - rh-postgresql10
    - "su postgres -c \"createdb -O awx awx\""
  register: pg_create_db_output
  ignore_errors: true
  when: true
  become: true
  become_user: root

- name: Create Postgres db validation
  set_fact: pg_create_db_result = failed
  when: pg_create_db_output.stderr|length > 0 and pg_create_db_output.stderr.find('already exists') == 0

- name: Create Postgres db - stop playbook in case of error
  fail: msg="Postgres failed creating db"
  when: pg_create_db_result == "failed"

- name: Import Database data
  command: scl enable rh-python36 rh-postgresql10 "awx-manage migrate"
  become: true
  become_user: awx
  when: true
  changed_when: false


- name: Initial configuration of AWX - create superuser
  shell: |
    set -o pipefail
    echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'root@localhost', 'password')" | \
    scl enable rh-python36 rh-postgresql10 "awx-manage shell"
  become: true
  become_user: awx
  register: awx_create_superuser_output
  ignore_errors: true
  when: true
  args:
    executable: /bin/sh


- name: Import Database data - validation
  set_fact: awx_create_superuser_result = failed
  when: awx_create_superuser_output.stderr|length > 0 and awx_create_superuser_output.stderr.find('already exists') == 0

- name: Import Database data - stop playbook in case of error
  fail: msg="Postgres failed creating db"
  when: awx_create_superuser_result == "failed"


- name: Initial configuration of AWX - create preload data
  command:
    argv:
    - scl
    - enable
    - rh-python36
    - rh-postgresql10
    - "awx-manage create_preload_data"
  become: true
  become_user: awx
  when: true
  changed_when: false

- name: Initial configuration of AWX - provision instance
  command:
    argv:
    - scl
    - enable
    - rh-python36
    - rh-postgresql10
    - "awx-manage provision_instance --hostname=$(hostname)"
  become: true
  become_user: awx
  when: true
  changed_when: false

- name: Initial configuration of AWX - register queue
  command:
    argv:
    - scl
    - enable
    - rh-python36
    - rh-postgresql10
    - "awx-manage register_queue --queuename=tower --hostnames=$(hostname)"
  become: true
  become_user: awx
  when: true
  changed_when: false

- name: Start and enable AWX service - cbreceiver
  systemd:
    enabled: true
    state: started
    name: awx-cbreceiver
  become: true
  become_user: root

- name: Start and enable AWX service - dispatcher
  systemd:
    enabled: true
    state: started
    name: awx-dispatcher
  become: true
  become_user: root

- name: Start and enable AWX service - channels-worker
  systemd:
    enabled: true
    state: started
    name: awx-channels-worker
  become: true
  become_user: root

- name: Start and enable AWX service - daphne
  systemd:
    enabled: true
    state: started
    name: awx-daphne
  become: true
  become_user: root

- name: Start and enable AWX service - web
  systemd:
    enabled: true
    state: started
    name: awx-web
  become: true
  become_user: root

# Configure SE Linux
- name: "SE Linux - Install ansible selinux support library"
  package:
    name: libselinux-python
    state: present
  register: status
  retries: 10
  delay: 2
  until: status is success
  become: true

- name: "SE Linux - Install ansible selinux configure libraries"
  package:
    name:
      - policycoreutils-python
      - libsemanage-python
    state: present
  register: status
  retries: 10
  delay: 2
  until: status is success
  become: true
  when: ansible_selinux.status == "enabled"

- name: "SE Linux - Enable connections to HTTP(S) ports"
  seport:
    ports: "80, 443"
    proto: tcp
    setype: http_port_t
    state: present
  become: true
  when: ansible_selinux.status == "enabled" and ansible_selinux.mode != "disabled"
  changed_when: false

